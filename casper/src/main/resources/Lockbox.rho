/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = 48a494f02a3af37ff9f110815c58407993b3ee7b282aa05562766acae34fad2b
 2.  |            | given              | timestamp = 1559156146649
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 04c1a88afc0810d0b7e4dea817f458c9d0a1913ec3459fb91bb9acdf0d867873d5144366275c5a63b0225a5167c6a838bb02285072d7177dc9f6407aaba87bca93
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x61a47068f8b14054beb31fd7b7f580623ff90104c04f7e4dac105ec52f379688)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x61a47068f8b14054beb31fd7b7f580623ff90104c04f7e4dac105ec52f379688) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a2061a47068f8b14054beb31fd7b7f580623ff90104c04f7e4dac105ec52f3796881001
 8.  | 7, 1,      | secp256k1          | sig = 3044022003fd0de5e01c9bb6d593c74c83f757f2c54bde58ed01b85e1d431cab12bf05d3022012d5b3cb23574e4e2bd15ade65e2593af0876f5b20d0f68d40d3f1a7495f52ca
 9.  | 4,         | registry           | uri = rho:id:w5zfefaasr5euzu1x551wwbgnt8o1c4345r3cgcwa1guyfre36fihu
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new 
  Lockbox,
  rs(`rho:registry:insertSigned:secp256k1`),
  uriOut,
  getDeployData(`rho:deploy:params`)
in {
  contract Lockbox(@"lock", @ownerRevAddress, protected, ret) = {
    new lockbox, getIdentity in {

      contract getIdentity(retCh) = {
        new ch in {
          getDeployData ! (*ch) |
          for (@_,@_,@userId, @_ <- ch) {
            retCh ! (userId)
          }
        }
      } |

      contract lockbox(@"unlock", retCh) = {

        new callerCh in {
          getIdentity!(*callerCh) |
          for(@callerPubKeyBytes <- callerCh) {

            new RevAddress(`rho:rev:address`), revAddrCh in {
              RevAddress!("fromPublicKey", callerPubKeyBytes, *revAddrCh)|
              for (@callerRevAddresss <- revAddrCh) {
                if (callerRevAddresss == ownerRevAddress) {
                  retCh ! (*protected)
                }
                else {
                  retCh ! (Nil)
                }
              }
            }

          }
        }
      } |

      ret ! (bundle+{*lockbox})
    }
  } |
  rs!(
    "04c1a88afc0810d0b7e4dea817f458c9d0a1913ec3459fb91bb9acdf0d867873d5144366275c5a63b0225a5167c6a838bb02285072d7177dc9f6407aaba87bca93".hexToBytes(),
    (9223372036854775807, bundle+{*Lockbox}),
    "3044022003fd0de5e01c9bb6d593c74c83f757f2c54bde58ed01b85e1d431cab12bf05d3022012d5b3cb23574e4e2bd15ade65e2593af0876f5b20d0f68d40d3f1a7495f52ca".hexToBytes(),
    *uriOut
  )
}
  
  
