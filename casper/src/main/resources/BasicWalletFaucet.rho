/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = b6f13c229bed13b1a5ba639bcef93e4316983e1edf01c4e67edf8c5a685f30a9
 2.  |            | given              | timestamp = 1559156052144
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 04137e903dff809e6f307009eeb2fe13b8490e8d6f612b3f293aa5d7960156f807b2a86face1f184d2fc4b7eb659fdb8e69f8bc801d9265a34c3e1ce74fd5be937
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x0483e8263c258cb1daabdd8b5ee19ea4f34f61573ca72b1c9c5f0ce277d9e3f7)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x0483e8263c258cb1daabdd8b5ee19ea4f34f61573ca72b1c9c5f0ce277d9e3f7) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a200483e8263c258cb1daabdd8b5ee19ea4f34f61573ca72b1c9c5f0ce277d9e3f71001
 8.  | 7, 1,      | secp256k1          | sig = 304402207dd84431a7b55515ba2ada42ca664afb46685dafbe93c54ba94ec2c645bb5e7e022056524758407cefd3fdc4525489e7c05a11bc68c5c9bd49d12c27a71ee10c988c
 9.  | 4,         | registry           | uri = rho:id:mjp8ac3zk41pyk64a64r64po7azcc4gca4x5sq37in34irsxqdjd6q
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new 
  BasicWalletFaucet, rs(`rho:registry:insertSigned:secp256k1`), uriOut,
  rl(`rho:registry:lookup`), BasicWalletCh
in {
  rl!(`rho:rchain:basicWallet`, *BasicWalletCh) |
  for(@(_, BasicWallet) <- BasicWalletCh) {
    contract BasicWalletFaucet(mint, return) = {
      new this in {
        contract this(@amount, @algorithm, @publicKey, return) = {
          new walletPurseCh in {
            mint!("makePurse", amount, *walletPurseCh) |
            for(@walletPurse <- walletPurseCh) {
              @BasicWallet!(walletPurse, algorithm, publicKey, *return)
            }
          }
        } |
        return!(bundle+{*this})
      }
    }
  } |
  rs!(
    "04137e903dff809e6f307009eeb2fe13b8490e8d6f612b3f293aa5d7960156f807b2a86face1f184d2fc4b7eb659fdb8e69f8bc801d9265a34c3e1ce74fd5be937".hexToBytes(),
    (9223372036854775807, bundle+{*BasicWalletFaucet}),
    "304402207dd84431a7b55515ba2ada42ca664afb46685dafbe93c54ba94ec2c645bb5e7e022056524758407cefd3fdc4525489e7c05a11bc68c5c9bd49d12c27a71ee10c988c".hexToBytes(),
    *uriOut
  )
}
  
  
