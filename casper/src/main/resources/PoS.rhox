// Rholang macro parameters:
// minimumBond - the minimum bond allowed by the PoS
// maximumBond - the maximum bond allowed by PoS
// initialBonds - the initial bonds map
// epochLength - the length of the validation epoch in blocks
// quarantineLength - the length of the quarantine time in blocks

/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = a9585a0687761139ab3587a4938fb5ab9fcba675c79fefba889859674046d4a5
 2.  |            | given              | timestamp = 1559156420651
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a20a32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b1001
 8.  | 7, 1,      | secp256k1          | sig = 3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f
 9.  | 4,         | registry           | uri = rho:id:m3xk7h8r54dtqtwsrnxqzhe81baswey66nzw6m533nyd45ptyoybqr
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new  PoS,
    registryLookup(`rho:registry:lookup`),
    revAddressOps(`rho:rev:address`),
    revVaultCh, listOpsCh,
    getUser,
    getCurrentUserAddress,
    getCurrentUserVault,
    pickActiveValidators,
    getMVar,
    runMVar,
    fst,
    deposit, distributeRewards,
    rs(`rho:registry:insertSigned:secp256k1`),
    uriOut in {
  registryLookup!(`rho:rchain:revVault`, *revVaultCh) |
  registryLookup!(`rho:lang:listOps`, *listOpsCh) |

  for(@(_, RevVault) <- revVaultCh;
      @(_, ListOps) <- listOpsCh) {
    new posRevAddressCh in {

      getCurrentUserAddress!(*posRevAddressCh) |
      for(@posRevAddress <- posRevAddressCh) {
        new stateCh, posVaultCh, initialActiveCh in {
          pickActiveValidators!($$initialBonds$$, {}, *initialActiveCh) |

          @RevVault!("findOrCreate", posRevAddress, *posVaultCh) |
          for (@(true, _) <- posVaultCh;
               @initialActive <- initialActiveCh) {

            // State structure:
            // pendingRewards : Map[PublickKey, Int] - are accummulated by calling "pay"
            // committedRewards : Map[PublickKey, Int] - are moved from pendingRewards at each closeBlock
            // activeValidators : List[PublicKey] - the active validators
            // withdrawers : Map[PublicKey, Int] - the validators willing to withdraw and the blocknumber for their withdrawal
            // allBonds : Map[PublickKey, Int] - each validator stake
            stateCh!(({}, {}, initialActive, {}, $$initialBonds$$)) |

            contract PoS (@"getBonds", returnCh) = {
              new tmpCh in {
                getMVar!(*stateCh, *tmpCh) |
                for (@(_, _, _, _, allBonds) <- tmpCh) {
                  returnCh!(allBonds)
                }
              }
            } |

            /**
             * Returns a Map[PublidKey, Int] containing the rewards accumulated for each validator.
             * The returned map contains only the committed rewards after the last closeBlock
             */
            contract PoS (@"getRewards", returnCh) = {
              new tmpCh in {
                getMVar!(*stateCh, *tmpCh) |
                for (@(_, rewards, _, _, _) <- tmpCh) {
                  returnCh!(rewards)
                }
              }
            } |

            contract PoS (@"bond", @amount, returnCh) = {
              new userCh, depositCh, processCh in {
                runMVar!(*stateCh, *processCh, *returnCh) |

                getUser!(*userCh) |
                for(@(pending, rewards, activeValidators, withdrawers, allBonds), resultCh <- processCh;
                    @userPk <- userCh) {
                  if (allBonds.contains(userPk)) {
                    resultCh!((pending, rewards, activeValidators, withdrawers, allBonds), (false, "Public key is already bonded."))
                  } else if (amount < $$minimumBond$$) {
                    resultCh!((pending, rewards, activeValidators, withdrawers, allBonds), (false, "Bond is less than minimum!"))
                  } else if (amount > $$maximumBond$$) {
                    resultCh!((pending, rewards, activeValidators, withdrawers, allBonds), (false, "Bond is greater than maximum!"))
                  } else {
                    deposit!(userPk, amount, *depositCh) |
                    for(@depositResult <- depositCh) {
                      match depositResult {
                        (true, _) => {
                          resultCh!(
                            (pending, rewards, activeValidators, withdrawers, allBonds.set(userPk,amount)),
                            depositResult
                          )
                        }

                        (false, errorMsg) => {
                          resultCh!((pending, rewards, activeValidators, withdrawers, allBonds), (false, "Bond deposit failed: " ++ errorMsg))
                        }
                      }
                    }
                  }
                }
              }
            } |

            contract PoS (@"withdraw", returnCh) = {
              new userCh, depositCh, processCh,
                  getBlockData(`rho:block:data`),
                  blockDataCh
              in {
                runMVar!(*stateCh, *processCh, *returnCh) |

                getBlockData!(*blockDataCh) |
                getUser!(*userCh) |
                for(@(pending, rewards, activeValidators, withdrawers, allBonds), resultCh <- processCh;
                    @userPk <- userCh;
                    _, @blockNumber <- blockDataCh) {
                  if (allBonds.contains(userPk)) {
                    resultCh!((pending, rewards, activeValidators, withdrawers.set(userPk, blockNumber), allBonds), (true, Nil))
                  } else {
                    resultCh!((pending, rewards, activeValidators, withdrawers, allBonds), (false, "User is not bonded"))
                  }
                }
              }
            } |

            contract PoS (@"pay", @amount, returnCh) = {
              new vaultCh, transferCh, userCh, processPayCh,
                  depositCh,
                  newPendingCh in {
                getUser!(*userCh) |
                runMVar!(*stateCh, *processPayCh, *returnCh) |
                for(@(pending, rewards, activeValidators, withdrawers, allBonds), payResultCh <- processPayCh;
                    @userPk <- userCh) {
                  deposit!(userPk, amount, *depositCh) |

                  distributeRewards!(amount, activeValidators, allBonds, pending, *newPendingCh) |

                  for(@depositResult <- depositCh;
                      @newPending <- newPendingCh) {
                    payResultCh!((newPending, rewards, activeValidators, withdrawers, allBonds), depositResult)
                  }
                }
              }
            } |

            contract PoS(@"slash", @blockHash, returnCh) = {
              new userCh, invalidBlocksCh, doSlashCh,
                  getInvalidBlocks(`rho:casper:invalidBlocks`) in {
                getInvalidBlocks!(*invalidBlocksCh) |
                getUser!(*userCh) |

                runMVar!(*stateCh, *doSlashCh, *returnCh) |
                for (@invalidBlocks <- invalidBlocksCh;
                     @userPk <- userCh;
                     @(pending, rewards, activeValidators, withdrawers, allBonds), slashResultCh <- doSlashCh) {
                  new toBeSlashed in {
                    toBeSlashed!(invalidBlocks.getOrElse(blockHash, userPk)) |
                    for (@validator <- toBeSlashed) {
                      // TODO: Transfer to coop wallet instead of just simply setting bonds to 0
                      slashResultCh!(
                        (pending.set(validator, 0),
                         rewards.set(validator, 0),
                         activeValidators,
                         withdrawers,
                         allBonds.set(validator, 0)),
                        true)
                    }
                  }
                }
              }
            } |

            contract PoS(@"closeBlock", ackCh) = {
              new blockDataCh, mvarProcessCh,
                  getBlockData(`rho:block:data`),
                  commitReward, rewardsCh, newValidatorsCh,
                  newWithdrawersCh, newBondsCh in {
                getBlockData!(*blockDataCh) |

                runMVar!(*stateCh, *mvarProcessCh, *ackCh) |
                for(_, @blockNumber <- blockDataCh;
                    @(pendingRewards, rewards, activeValidators, withdrawers, allBonds), mvarResultCh <- mvarProcessCh) {

                  if (blockNumber % $$epochLength$$ == 0) {
                    pickActiveValidators!(allBonds, withdrawers, *newValidatorsCh)
                  } else {
                    newValidatorsCh!(activeValidators)
                  } |

                  new quarantinedValidatorsCh,
                      validatorsToWithdrawListCh,
                      validatorsToWithdrawSetCh,
                      isQuarantineFinished,
                      isWithdrawn,
                      accumulateToSet,
                      accumulateToMap,
                      newBondsListCh,
                      newWithdrawersListCh,
                      test1ch, test2ch
                  in {
                    @ListOps!("filter", withdrawers.toList(), *isQuarantineFinished, *quarantinedValidatorsCh) |
                    for (@quarantinedValidators <- quarantinedValidatorsCh) {

                      @ListOps!("map", quarantinedValidators, *fst, *validatorsToWithdrawListCh) |
                      for (@validatorsToWithdrawList <- validatorsToWithdrawListCh) {
                        @ListOps!("fold", validatorsToWithdrawList, Set(), *accumulateToSet, *validatorsToWithdrawSetCh) |

                        for (@validatorsToWithdrawSet <- validatorsToWithdrawSetCh) {
                          @ListOps!("filter", allBonds.toList(), *isWithdrawn, *newBondsListCh) |

                          for (@newBondsList <- newBondsListCh) {
                            @ListOps!("fold", newBondsList, {}, *accumulateToMap, *newBondsCh)
                          } |

                          @ListOps!("filter", withdrawers.toList(), *isWithdrawn, *newWithdrawersListCh) |
                          contract isWithdrawn(@(pk, _), resultCh) = {
                            resultCh!(not validatorsToWithdrawSet.contains(pk))
                          } |

                          for (@newWithdrawersList <- newWithdrawersListCh) {
                            @ListOps!("fold", newWithdrawersList, {}, *accumulateToMap, *newWithdrawersCh)
                          } |

                          contract isWithdrawn(@(pk, _), resultCh) = { resultCh!(not validatorsToWithdrawSet.contains(pk))}
                        }
                      }
                    } |

                    contract isQuarantineFinished(@(_, blockTime), resultCh) = {
                      resultCh!(blockTime >= $$quarantineLength$$)
                    } |

                    contract accumulateToSet(@x, @acc, resultCh) = {resultCh! (acc.union(Set(x)))} |

                    contract accumulateToMap(@(k, v), @acc, resultCh) = {resultCh!(acc.set(k, v))}
                  } |

                  @ListOps!("fold", pendingRewards.toList(), rewards, *commitReward, *rewardsCh) |
                  contract commitReward(@(pk, pending), @acc, resultCh) = {
                    resultCh!(acc.set(pk, acc.getOrElse(pk, 0) + pending))
                  } |

                  for (@rewards <- rewardsCh;
                       @newValidators <- newValidatorsCh;
                       @newWithdrawers <- newWithdrawersCh ;
                       @newBonds <- newBondsCh) {
                    mvarResultCh!(({}, rewards, newValidators, newWithdrawers, newBonds), Nil)
                  }
                }
              }
            }
          }
        } |

        contract deposit (@fromUserPk, @amount, returnCh) = {
          new vaultCh,
              revAddressCh,
              authKeyCh in {
            @RevVault!("deployerAuthKey", *authKeyCh) |
            for (@authKey <- authKeyCh) {
              revAddressOps!("fromPublicKey", fromUserPk, *revAddressCh) |
              for (@fromRevAddress <- revAddressCh) {
                @RevVault!("findOrCreate", fromRevAddress, *vaultCh) |
                for (@(true, fromVault) <- vaultCh) {
                  @fromVault!("transfer", posRevAddress, amount, authKey, *returnCh)
                }
              }
            }
          }
        } |

        contract distributeRewards(@amount, @activeValidators, @bonds, @originalRewards, returnCh) = {
          new computeSum, totalActiveStakeCh,
              computeDelta, rewardsDeltaCh,
              computeMergeMap in {
            @ListOps!("fold", activeValidators, 0, *computeSum, *totalActiveStakeCh) |
            contract computeSum(@pk, @acc, resultCh) = {
              resultCh!(acc + bonds.get(pk))
            } |

            for(@totalActiveStake <- totalActiveStakeCh) {
              @ListOps!("fold", activeValidators, {}, *computeDelta, *rewardsDeltaCh) |
              contract computeDelta(@pk, @acc, resultCh) = {
                resultCh!(acc.set(pk, (amount * bonds.get(pk)) / totalActiveStake))
              }
            } |

            for (@rewardsDelta <- rewardsDeltaCh) {

              @ListOps!("fold", rewardsDelta.toList(), originalRewards, *computeMergeMap, *returnCh) |
              contract computeMergeMap(@(pk, rewardDelta), @acc, resultCh) = {
                resultCh!(acc.set(pk, acc.getOrElse(pk, 0) + rewardDelta))
              }
            }
          }
        }
      } |

      contract getMVar(varCh, returnCh) = {
        for (@v <- varCh) {
          varCh!(v) |
          returnCh!(v)
        }
      } |
      contract runMVar(varCh, processCh, returnCh) = {
        new resultCh in {
          for (@v <- varCh) {
            processCh!(v, *resultCh) |
            for (@newV, @result <- resultCh) {
              varCh!(newV) |
              returnCh!(result)
            }
          }
        }
      } |

      contract fst(@(first, _), resultCh) = {
        resultCh!(first)
      } |

      contract getUser (returnCh) = {
        new parametersCh, getParameters(`rho:deploy:params`) in {
          getParameters!(*parametersCh) |
          for (_, _, @userPk, _ <- parametersCh) {
            returnCh!(userPk)
          }
        }
      } |

      contract getCurrentUserAddress(returnCh) = {
        new userCh in {
          getUser!(*userCh) |
          for (@userPk <- userCh) {
            revAddressOps!("fromPublicKey", userPk, *returnCh)
          }
        }
      } |

      contract pickActiveValidators(@allBonds, @withdrawers, returnCh) = {
        new availableValidatorsCh, isAvailable in {
          @ListOps!("filter", allBonds.toList(), *isAvailable, *availableValidatorsCh) |
          contract isAvailable(@(pk, _), resultCh) = { resultCh!(not withdrawers.contains(pk))} |

          for (@availableValidators <- availableValidatorsCh) {
            //TODO choose only a limited number of validators
            @ListOps!("map", availableValidators, *fst, *returnCh)
          }
        }
      } |

      contract getCurrentUserVault(returnCh) = {
        new revAddressCh in {
          getCurrentUserAddress!(*revAddressCh) |
          for (@revAddress <- revAddressCh) {
            @RevVault!("findOrCreate", revAddress, *returnCh)
          }
        }
      }
    } |
    rs!("047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f".hexToBytes(),
    (9223372036854775807, bundle+{*PoS}),
    "3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f".hexToBytes(),
    *uriOut)
  }
}
