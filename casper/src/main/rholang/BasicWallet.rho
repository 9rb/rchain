//scalapackage coop.rchain.rholang.wallet

//assumes standard purse API from MakeMint
contract @"BasicWallet"(@purse, @algorithm, @pk, return) = {
  new cryptoVerifyCh in {
    match algorithm {
      "ed25519" => {
        cryptoVerifyCh!(["ed25519Verify"])
      }
      _ => {
        cryptoVerifyCh!([])
      }
    } |
    for(@maybeCryptoVerify <- cryptoVerifyCh) {
      match maybeCryptoVerify {
        []             => { return!([]) }
        [cryptoVerify] => {
          new basicWallet, verify, nonceCh in {
            nonceCh!(-1) |
            contract verify(@nonce, @amount, @retCh, @sig, return) = {
              for(@prevNonce <- nonceCh) {
                match nonce == (prevNonce + 1) {
                  true => { 
                    new result in {
                      @cryptoVerify!([nonce, amount, retCh].toByteArray(), sig.hexToBytes(), pk.hexToBytes(), *result) |
                      for(@r <- result) {
                        match r {
                          true => { nonceCh!(nonce) | return!(true) }
                          _    => { nonceCh!(prevNonce) | return!(false) }
                        }
                      }
                    }
                  }
                  _ => { nonceCh!(prevNonce) | return!(false) }
                }
              }
            } |
            contract @[*basicWallet, "getNonce"](return) = {
              for(@nonce <- nonceCh) {
                nonceCh!(nonce) | return!(nonce)
              }
            } |
            contract @[*basicWallet, "getBalance"](return) = {
              @[purse, "getBalance"]!(*return)
            } |
            contract @[*basicWallet, "deposit"](@amount, @src, success) = {
              @[purse, "deposit"]!(amount, src, *success)
            } |
            contract @[*basicWallet, "withdraw"](@amount, @nonce, @sig, return) = {
              new verifyResult in {
                verify!(nonce, amount, *return, sig, *verifyResult) | for(@r <- verifyResult) {
                  match r {
                    true => { @[purse, "split"]!(amount, *return) }
                    _    => { return!([]) }
                  }
                }
              }
            } |
            return!([*basicWallet])
          }
        }
      }
    }
  }
}
