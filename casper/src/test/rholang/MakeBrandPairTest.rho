//scalapackage coop.rchain.rholang.security

//requires MakeBrandPair, TestSet, LinkedList
@"MakeBrandPair"!("bp1") | @"MakeBrandPair"!("bp2") |
for(@r1 <- @"bp1"; @r2 <- @"bp2") {
  match [r1, r2] {
    [[seal, unseal], [otherSeal, otherUnseal]] => {
      //seal composed with unseal == identity (modulo that it is now a single element list)
      contract @"identity"(@input, return) = {
        new idContract in {
          contract idContract(return) = {
            new sealed in {
              @{seal}!(input, *sealed) | for(@s <- sealed) {
                @{unseal}!(s, *return)
              }
            }
          } |
          return!(*idContract)
        }
      } |
      //mismatched sealers and unsealers do not return results
      contract @"mismatch"(@input, return) = {
        new misContract in {
          contract misContract(return) = {
            new sealed in {
              @{seal}!(input, *sealed) | for(@s <- sealed) {
                @{otherUnseal}!(s, *return)
              }
            }
          } |
          return!(*misContract)
        }
      } |

      
      @"identity"!(1,     "idInt") |
      @"identity"!("x",   "idString") |
      @"identity"!(true,  "idBooleanT") |
      @"identity"!(false, "idBooleanF") |
      @"identity"!(seal,   "idUnforgable") |
      @"TestSet"!(
        "Sealing then unsealing should preserve the input.",
        [
          ["idInt",        [1]],
          ["idString",     ["x"]],
          ["idBooleanT",   [true]],
          ["idBooleanF",   [false]],
          ["idUnforgable", [seal]]
        ]
      ) |

      @"mismatch"!(1,     "misInt") |
      @"mismatch"!("x",   "misString") |
      @"mismatch"!(true,  "misBooleanT") |
      @"mismatch"!(false, "misBooleanF") |
      @"mismatch"!(seal,   "misUnforgable") |
      @"TestSet"!(
        "Mismatched sealer/unsealer should return nothing.",
        [
          ["misInt",        []],
          ["misString",     []],
          ["misBooleanT",   []],
          ["misBooleanF",   []],
          ["misUnforgable", []]
        ]
      )
    }
  }
}
