new
  rl(`rho:registry:lookup`), RevVaultCh,
  vaultLockedCh, vaultUnlockedCh, balanceCh,
  stdout(`rho:io:stdout`), log
in {

  // we'll consider making RevVault a system contract under `rho:rev:vault`
  rl!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |
  for (@(_, RevVault) <- RevVaultCh) {

    log!(("2.access_your_own_vault.rho")) |

    // REPLACE THE REV ADDRESS HERE vvv
    match "%REV_ADDR" {
      revAddress => {

        log!(("Using RevAddress:", revAddress, "to obtain a `deployer's-pubkey-bound` vault")) |

        // most RevVault methods return an `Either[String, A] = (false, String) \/ (true, A)`
        @RevVault!("findOrCreate", revAddress, *vaultLockedCh) |
        for (@(true, vaultLocked) <- vaultLockedCh) {

          log!("Unlocking vault") |

          @vaultLocked!("unlock", *vaultUnlockedCh) |
          for (@res <- vaultUnlockedCh) {

            match (res) {
              Nil => {
                log!("Unlocking failed")
              }
              vault => {
                log!("Unlocking succeeded") |

                @vault!("balance", *balanceCh) |
                for (@balance <- balanceCh) {

                  log!(("Balance is", balance))
                }
              }
            }
          }
        }
      }
    }

  } |

  contract log(@data) = {
    @"DEMO"!(data) | stdout!(data)
  }
}

