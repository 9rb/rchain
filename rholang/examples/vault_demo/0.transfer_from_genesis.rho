// A set of testnet admin-controlled 'genesis vault'-s will be our approach for providing
// a testnet-token supply for the Testnet 1.
// Everything regarding the genesis vaults is subject to change.

new
  rl(`rho:registry:lookup`), RevVaultCh,
  vaultCh,
  stdout(`rho:io:stdout`), log
in {

  rl!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |
  for (@(_, RevVault) <- RevVaultCh) {

    // REPLACE THE REV ADDRESSES HERE vvv
    match (
      "%FROM",
      "%TO",
      100
    ) {
      (from, to, amount) => {

        log!(("0.create_genesis_vault.rho")) |
        log!(("Using RevAddress:", from, "to obtain a `deployer's-pubKey-bound` vault")) |

        @RevVault!("findOrCreateGenesisVault", from, 9000, *vaultCh ) |

        // most Vault methods return an `Either[String, A] = (false, String) \/ (true, A)`
        for (@(true, vault) <- vaultCh) {

          log!(("Beginning transfer of ", amount, "REV from", from, "to", to)) |

          new resultCh in {
            @vault!("transfer", to, amount, *resultCh) |
            for (@result <- resultCh) {

              log!(("Finished transfer of ", amount, "REV to", to, "result was:", result))
            }
          }

        }
      }
    }
  } |

  // for simplicity, we're sending to a public, forgable name obtained from quoting the "DEMO" process.
  contract log(@data) = {
    @"DEMO"!(data) | stdout!(data)
  }
}


